{"ast":null,"code":"import socketClient from 'socket.io-client'; // import store from '../../store/store';\n// import * as dashboardActions from '../../store/actions/dashboardActions';\n\nconst SERVER = 'http://localhost:5000'; // const broadcastEventTypes = {\n//   ACTIVE_USERS: 'ACTIVE_USERS',\n//   GROUP_CALL_ROOMS: 'GROUP_CALL_ROOMS'\n// };\n// let socket;\n\nexport const connectWithWebSocket = () => {\n  socket = socketClient(SERVER);\n  socket.on('connection', () => {\n    console.log('succesfully connected with wss server');\n    console.log(socket.id);\n  }); // socket.on('broadcast', (data) => {\n  //   handleBroadcastEvents(data);\n  // });\n};\nexport const registerNewUser = username => {\n  socket.emit('register-new-user', {\n    username: username,\n    socketId: socket.id\n  });\n};\n\nconst handleBroadcastEvents = data => {\n  switch (data.event) {\n    case broadcastEventTypes.ACTIVE_USERS:\n      const activeUsers = data.activeUsers.filter(activeUser => activeUser.socketId !== socket.id);\n      store.dispatch(dashboardActions.setActiveUsers(activeUsers));\n      break;\n\n    default:\n      break;\n  }\n};","map":{"version":3,"sources":["C:/Users/akshi/OneDrive/Documents/Desktop/msteams/msteams-frontend/src/utils/wssConnection/wssConnection.js"],"names":["socketClient","SERVER","connectWithWebSocket","socket","on","console","log","id","registerNewUser","username","emit","socketId","handleBroadcastEvents","data","event","broadcastEventTypes","ACTIVE_USERS","activeUsers","filter","activeUser","store","dispatch","dashboardActions","setActiveUsers"],"mappings":"AAAA,OAAOA,YAAP,MAAyB,kBAAzB,C,CACA;AACA;;AAEA,MAAMC,MAAM,GAAG,uBAAf,C,CAEA;AACA;AACA;AACA;AAEA;;AAEA,OAAO,MAAMC,oBAAoB,GAAG,MAAM;AACxCC,EAAAA,MAAM,GAAGH,YAAY,CAACC,MAAD,CAArB;AAEAE,EAAAA,MAAM,CAACC,EAAP,CAAU,YAAV,EAAwB,MAAM;AAC5BC,IAAAA,OAAO,CAACC,GAAR,CAAY,uCAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAYH,MAAM,CAACI,EAAnB;AACD,GAHD,EAHwC,CAOxC;AACA;AACA;AAED,CAXM;AAcP,OAAO,MAAMC,eAAe,GAAIC,QAAD,IAAc;AAC3CN,EAAAA,MAAM,CAACO,IAAP,CAAY,mBAAZ,EAAiC;AAC/BD,IAAAA,QAAQ,EAAEA,QADqB;AAE/BE,IAAAA,QAAQ,EAAER,MAAM,CAACI;AAFc,GAAjC;AAID,CALM;;AAOP,MAAMK,qBAAqB,GAAIC,IAAD,IAAU;AACtC,UAAQA,IAAI,CAACC,KAAb;AACE,SAAKC,mBAAmB,CAACC,YAAzB;AACE,YAAMC,WAAW,GAAGJ,IAAI,CAACI,WAAL,CAAiBC,MAAjB,CAAwBC,UAAU,IAAIA,UAAU,CAACR,QAAX,KAAwBR,MAAM,CAACI,EAArE,CAApB;AACAa,MAAAA,KAAK,CAACC,QAAN,CAAeC,gBAAgB,CAACC,cAAjB,CAAgCN,WAAhC,CAAf;AACA;;AACF;AACE;AANJ;AAQD,CATD","sourcesContent":["import socketClient from 'socket.io-client';\r\n// import store from '../../store/store';\r\n// import * as dashboardActions from '../../store/actions/dashboardActions';\r\n\r\nconst SERVER = 'http://localhost:5000';\r\n\r\n// const broadcastEventTypes = {\r\n//   ACTIVE_USERS: 'ACTIVE_USERS',\r\n//   GROUP_CALL_ROOMS: 'GROUP_CALL_ROOMS'\r\n// };\r\n\r\n// let socket;\r\n\r\nexport const connectWithWebSocket = () => {\r\n  socket = socketClient(SERVER);\r\n\r\n  socket.on('connection', () => {\r\n    console.log('succesfully connected with wss server');\r\n    console.log(socket.id);\r\n  });\r\n  // socket.on('broadcast', (data) => {\r\n  //   handleBroadcastEvents(data);\r\n  // });\r\n\r\n}\r\n;\r\n\r\nexport const registerNewUser = (username) => {\r\n  socket.emit('register-new-user', {\r\n    username: username,\r\n    socketId: socket.id\r\n  });\r\n};\r\n\r\nconst handleBroadcastEvents = (data) => {\r\n  switch (data.event) {\r\n    case broadcastEventTypes.ACTIVE_USERS:\r\n      const activeUsers = data.activeUsers.filter(activeUser => activeUser.socketId !== socket.id);\r\n      store.dispatch(dashboardActions.setActiveUsers(activeUsers));\r\n      break;\r\n    default:\r\n      break;\r\n  }\r\n}\r\n;\r\n"]},"metadata":{},"sourceType":"module"}