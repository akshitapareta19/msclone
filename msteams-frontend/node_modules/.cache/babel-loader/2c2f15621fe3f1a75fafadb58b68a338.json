{"ast":null,"code":"import * as wss from '../wssConnection/wssConnection';\nimport store from '../../store/store';\nimport { setGroupCallActive, setCallState, callStates, setGroupCallIncomingStreams, clearGroupCallData } from '../../store/actions/callActions';\nlet myPeer;\nlet myPeerId;\nlet groupCallRoomId;\nlet groupCallHost = false;\nexport const connectWithMyPeer = () => {\n  myPeer = new window.Peer(undefined, {\n    path: '/peerjs',\n    host: '/',\n    port: '5000',\n    config: {\n      iceServers: [...getTurnServers(), {\n        url: 'stun: stun.1und1.de.3478'\n      }]\n    }\n  });\n  myPeer.on('open', id => {\n    console.log('succesfully connected with peer server');\n    myPeerId = id;\n  });\n  myPeer.on('call', call => {\n    call.answer(store.getState().call.localStream);\n    call.on('stream', incomingStream => {\n      const streams = store.getState().call.groupCallStreams;\n      const stream = streams.find(stream => stream.id === incomingStream.id);\n\n      if (!stream) {\n        addVideoStream(incomingStream);\n      }\n    });\n  });\n};\nexport const createNewGroupCall = () => {\n  groupCallHost = true;\n  wss.registerGroupCall({\n    username: store.getState().dashboard.username,\n    peerId: myPeerId\n  });\n  store.dispatch(setGroupCallActive(true));\n  store.dispatch(setCallState(callStates.CALL_IN_PROGRESS));\n};\nexport const joinGroupCall = (hostSocketId, roomId) => {\n  const localStream = store.getState().call.localStream;\n  groupCallRoomId = roomId;\n  wss.userWantsToJoinGroupCall({\n    peerId: myPeerId,\n    hostSocketId,\n    roomId,\n    localStreamId: localStream.id\n  });\n  store.dispatch(setGroupCallActive(true));\n  store.dispatch(setCallState(callStates.CALL_IN_PROGRESS));\n};\nexport const connectToNewUser = data => {\n  const localStream = store.getState().call.localStream;\n  const call = myPeer.call(data.peerId, localStream);\n  call.on('stream', incomingStream => {\n    const streams = store.getState().call.groupCallStreams;\n    const stream = streams.find(stream => stream.id === incomingStream.id);\n\n    if (!stream) {\n      addVideoStream(incomingStream);\n    }\n  });\n};\nexport const leaveGroupCall = () => {\n  if (groupCallHost) {\n    wss.groupCallClosedByHost({\n      peerId: myPeerId\n    });\n  } else {\n    wss.userLeftGroupCall({\n      streamId: store.getState().call.localStream.id,\n      roomId: groupCallRoomId\n    });\n  }\n\n  clearGroupData();\n};\nexport const clearGroupData = () => {\n  groupCallRoomId = null;\n  groupCallHost = null;\n  store.dispatch(clearGroupCallData());\n  myPeer.destroy();\n  connectWithMyPeer();\n  const localStream = store.getState().call.localStream;\n  localStream.getVideoTracks()[0].enabled = true;\n  localStream.getAudioTracks()[0].enabled = true;\n};\nexport const removeInactiveStream = data => {\n  const groupCallStreams = store.getState().call.groupCallStreams.filter(stream => stream.id !== data.streamId);\n  store.dispatch(setGroupCallIncomingStreams(groupCallStreams));\n};\n\nconst addVideoStream = incomingStream => {\n  const groupCallStreams = [...store.getState().call.groupCallStreams, incomingStream];\n  store.dispatch(setGroupCallIncomingStreams(groupCallStreams));\n}; // if group call is active return roomId if not return false\n\n\nexport const checkActiveGroupCall = () => {\n  if (store.getState().call.groupCallActive) {\n    return groupCallRoomId;\n  } else {\n    return false;\n  }\n};","map":{"version":3,"sources":["C:/Users/akshi/OneDrive/Documents/Desktop/msteams/msteams-frontend/src/utils/webRTC/webRTCGroupCallHandler.js"],"names":["wss","store","setGroupCallActive","setCallState","callStates","setGroupCallIncomingStreams","clearGroupCallData","myPeer","myPeerId","groupCallRoomId","groupCallHost","connectWithMyPeer","window","Peer","undefined","path","host","port","config","iceServers","getTurnServers","url","on","id","console","log","call","answer","getState","localStream","incomingStream","streams","groupCallStreams","stream","find","addVideoStream","createNewGroupCall","registerGroupCall","username","dashboard","peerId","dispatch","CALL_IN_PROGRESS","joinGroupCall","hostSocketId","roomId","userWantsToJoinGroupCall","localStreamId","connectToNewUser","data","leaveGroupCall","groupCallClosedByHost","userLeftGroupCall","streamId","clearGroupData","destroy","getVideoTracks","enabled","getAudioTracks","removeInactiveStream","filter","checkActiveGroupCall","groupCallActive"],"mappings":"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","sourcesContent":["import * as wss from '../wssConnection/wssConnection';\r\nimport store from '../../store/store';\r\nimport { setGroupCallActive, setCallState, callStates, setGroupCallIncomingStreams, clearGroupCallData } from '../../store/actions/callActions';\r\n\r\nlet myPeer;\r\nlet myPeerId;\r\nlet groupCallRoomId;\r\nlet groupCallHost = false;\r\n\r\nexport const connectWithMyPeer = () => {\r\n  myPeer = new window.Peer(undefined, {\r\n    path: '/peerjs',\r\n    host: '/',\r\n    port: '5000',\r\n    config: {\r\n      iceServers: [...getTurnServers(),{ url: 'stun: stun.1und1.de.3478'}]\r\n    }\r\n  });\r\n\r\n  myPeer.on('open', (id) => {\r\n    console.log('succesfully connected with peer server');\r\n    myPeerId = id;\r\n  });\r\n\r\n  myPeer.on('call', call => {\r\n    call.answer(store.getState().call.localStream);\r\n    call.on('stream', incomingStream => {\r\n      const streams = store.getState().call.groupCallStreams;\r\n      const stream = streams.find(stream => stream.id === incomingStream.id);\r\n\r\n      if (!stream) {\r\n        addVideoStream(incomingStream);\r\n      }\r\n    });\r\n  });\r\n};\r\n\r\nexport const createNewGroupCall = () => {\r\n  groupCallHost = true;\r\n  wss.registerGroupCall({\r\n    username: store.getState().dashboard.username,\r\n    peerId: myPeerId\r\n  });\r\n\r\n  store.dispatch(setGroupCallActive(true));\r\n  store.dispatch(setCallState(callStates.CALL_IN_PROGRESS));\r\n}\r\n;\r\n\r\nexport const joinGroupCall = (hostSocketId, roomId) => {\r\n  const localStream = store.getState().call.localStream;\r\n  groupCallRoomId = roomId;\r\n\r\n  wss.userWantsToJoinGroupCall({\r\n    peerId: myPeerId,\r\n    hostSocketId,\r\n    roomId,\r\n    localStreamId: localStream.id\r\n  });\r\n\r\n  store.dispatch(setGroupCallActive(true));\r\n  store.dispatch(setCallState(callStates.CALL_IN_PROGRESS));\r\n};\r\n\r\nexport const connectToNewUser = (data) => {\r\n  const localStream = store.getState().call.localStream;\r\n\r\n  const call = myPeer.call(data.peerId, localStream);\r\n\r\n  call.on('stream', (incomingStream) => {\r\n    const streams = store.getState().call.groupCallStreams;\r\n    const stream = streams.find(stream => stream.id === incomingStream.id);\r\n\r\n    if (!stream) {\r\n      addVideoStream(incomingStream);\r\n    }\r\n  });\r\n};\r\n\r\nexport const leaveGroupCall = () => {\r\n  if (groupCallHost) {\r\n    wss.groupCallClosedByHost({\r\n      peerId: myPeerId\r\n    });\r\n  } else {\r\n    wss.userLeftGroupCall({\r\n      streamId: store.getState().call.localStream.id,\r\n      roomId: groupCallRoomId\r\n    });\r\n  }\r\n  clearGroupData();\r\n};\r\n\r\nexport const clearGroupData = () => {\r\n  groupCallRoomId = null;\r\n  groupCallHost = null;\r\n  store.dispatch(clearGroupCallData());\r\n  myPeer.destroy();\r\n  connectWithMyPeer();\r\n\r\n  const localStream = store.getState().call.localStream;\r\n  localStream.getVideoTracks()[0].enabled = true;\r\n  localStream.getAudioTracks()[0].enabled = true;\r\n};\r\n\r\nexport const removeInactiveStream = (data) => {\r\n  const groupCallStreams = store.getState().call.groupCallStreams.filter(\r\n    stream => stream.id !== data.streamId\r\n  );\r\n  store.dispatch(setGroupCallIncomingStreams(groupCallStreams));\r\n};\r\n\r\nconst addVideoStream = (incomingStream) => {\r\n  const groupCallStreams = [\r\n    ...store.getState().call.groupCallStreams,\r\n    incomingStream\r\n  ];\r\n\r\n  store.dispatch(setGroupCallIncomingStreams(groupCallStreams));\r\n};\r\n\r\n// if group call is active return roomId if not return false\r\nexport const checkActiveGroupCall = () => {\r\n  if (store.getState().call.groupCallActive) {\r\n    return groupCallRoomId;\r\n  } else {\r\n    return false;\r\n  }\r\n}\r\n;\r\n"]},"metadata":{},"sourceType":"module"}