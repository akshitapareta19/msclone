{"ast":null,"code":"import * as wss from '../wssConnection/wssConnection';\nimport store from '../../store/store';\nimport { setGroupCallActive, setCallState, callStates } from '../../store/actions/callActions';\nlet myPeer;\nlet myPeerId;\nexport const connectWithMyPeer = () => {\n  myPeer = new window.Peer(undefined, {\n    path: '/peerjs',\n    host: '/',\n    port: '5000'\n  });\n  myPeer.on('open', id => {\n    console.log('succesfully connected with peer server');\n    myPeerId = id;\n  });\n  myPeer.on('call', call => {\n    call.answer(store.getState().call.localStream);\n    call.on('stream', incomingStream => {\n      console.log('stream came');\n    });\n  });\n};\nexport const createNewGroupCall = () => {\n  wss.registerGroupCall({\n    username: store.getState().dashboard.username,\n    peerId: myPeerId\n  });\n  store.dispatch(setGroupCallActive(true));\n  store.dispatch(setCallState(callStates.CALL_IN_PROGRESS));\n};\nexport const joinGroupCall = (hostSocketId, roomId) => {\n  const localStream = store.getState().call.localStream;\n  wss.userWantsToJoinGroupCall({\n    peerId: myPeerId,\n    hostSocketId,\n    roomId,\n    localStreamId: localStream.id\n  });\n  store.dispatch(setGroupCallActive(true));\n  store.dispatch(setCallState(callStates.CALL_IN_PROGRESS));\n};\nexport const connectToNewUser = data => {\n  const localStream = store.getState().call.localStream;\n  const call = myPeer.call(data.peerId, localStream);\n  call.on('stream', incomingStream => {\n    console.log('stream came');\n  });\n};","map":{"version":3,"sources":["C:/Users/akshi/OneDrive/Documents/Desktop/msteams/msteams-frontend/src/utils/webRTC/webRTCGroupCallHandler.js"],"names":["wss","store","setGroupCallActive","setCallState","callStates","myPeer","myPeerId","connectWithMyPeer","window","Peer","undefined","path","host","port","on","id","console","log","call","answer","getState","localStream","incomingStream","createNewGroupCall","registerGroupCall","username","dashboard","peerId","dispatch","CALL_IN_PROGRESS","joinGroupCall","hostSocketId","roomId","userWantsToJoinGroupCall","localStreamId","connectToNewUser","data"],"mappings":"AAAA,OAAO,KAAKA,GAAZ,MAAqB,gCAArB;AACA,OAAOC,KAAP,MAAkB,mBAAlB;AACA,SAASC,kBAAT,EAA6BC,YAA7B,EAA2CC,UAA3C,QAA6D,iCAA7D;AAEA,IAAIC,MAAJ;AACA,IAAIC,QAAJ;AACA,OAAO,MAAMC,iBAAiB,GAAG,MAAM;AACrCF,EAAAA,MAAM,GAAG,IAAIG,MAAM,CAACC,IAAX,CAAgBC,SAAhB,EAA2B;AAClCC,IAAAA,IAAI,EAAE,SAD4B;AAElCC,IAAAA,IAAI,EAAE,GAF4B;AAGlCC,IAAAA,IAAI,EAAE;AAH4B,GAA3B,CAAT;AAMAR,EAAAA,MAAM,CAACS,EAAP,CAAU,MAAV,EAAmBC,EAAD,IAAQ;AACxBC,IAAAA,OAAO,CAACC,GAAR,CAAY,wCAAZ;AACAX,IAAAA,QAAQ,GAAGS,EAAX;AACD,GAHD;AAKAV,EAAAA,MAAM,CAACS,EAAP,CAAU,MAAV,EAAkBI,IAAI,IAAI;AACxBA,IAAAA,IAAI,CAACC,MAAL,CAAYlB,KAAK,CAACmB,QAAN,GAAiBF,IAAjB,CAAsBG,WAAlC;AACAH,IAAAA,IAAI,CAACJ,EAAL,CAAQ,QAAR,EAAkBQ,cAAc,IAAI;AAClCN,MAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;AACD,KAFD;AAGD,GALD;AAMD,CAlBM;AAoBP,OAAO,MAAMM,kBAAkB,GAAG,MAAM;AACtCvB,EAAAA,GAAG,CAACwB,iBAAJ,CAAsB;AACpBC,IAAAA,QAAQ,EAAExB,KAAK,CAACmB,QAAN,GAAiBM,SAAjB,CAA2BD,QADjB;AAEpBE,IAAAA,MAAM,EAAErB;AAFY,GAAtB;AAKAL,EAAAA,KAAK,CAAC2B,QAAN,CAAe1B,kBAAkB,CAAC,IAAD,CAAjC;AACAD,EAAAA,KAAK,CAAC2B,QAAN,CAAezB,YAAY,CAACC,UAAU,CAACyB,gBAAZ,CAA3B;AACD,CARM;AAWP,OAAO,MAAMC,aAAa,GAAG,CAACC,YAAD,EAAeC,MAAf,KAA0B;AACrD,QAAMX,WAAW,GAAGpB,KAAK,CAACmB,QAAN,GAAiBF,IAAjB,CAAsBG,WAA1C;AAEArB,EAAAA,GAAG,CAACiC,wBAAJ,CAA6B;AAC3BN,IAAAA,MAAM,EAAErB,QADmB;AAE3ByB,IAAAA,YAF2B;AAG3BC,IAAAA,MAH2B;AAI3BE,IAAAA,aAAa,EAAEb,WAAW,CAACN;AAJA,GAA7B;AAOAd,EAAAA,KAAK,CAAC2B,QAAN,CAAe1B,kBAAkB,CAAC,IAAD,CAAjC;AACAD,EAAAA,KAAK,CAAC2B,QAAN,CAAezB,YAAY,CAACC,UAAU,CAACyB,gBAAZ,CAA3B;AACD,CAZM;AAcP,OAAO,MAAMM,gBAAgB,GAAIC,IAAD,IAAU;AACxC,QAAMf,WAAW,GAAGpB,KAAK,CAACmB,QAAN,GAAiBF,IAAjB,CAAsBG,WAA1C;AAEA,QAAMH,IAAI,GAAGb,MAAM,CAACa,IAAP,CAAYkB,IAAI,CAACT,MAAjB,EAAyBN,WAAzB,CAAb;AAEAH,EAAAA,IAAI,CAACJ,EAAL,CAAQ,QAAR,EAAmBQ,cAAD,IAAoB;AACpCN,IAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;AACD,GAFD;AAGD,CARM","sourcesContent":["import * as wss from '../wssConnection/wssConnection';\r\nimport store from '../../store/store';\r\nimport { setGroupCallActive, setCallState, callStates } from '../../store/actions/callActions';\r\n\r\nlet myPeer;\r\nlet myPeerId;\r\nexport const connectWithMyPeer = () => {\r\n  myPeer = new window.Peer(undefined, {\r\n    path: '/peerjs',\r\n    host: '/',\r\n    port: '5000'\r\n  });\r\n\r\n  myPeer.on('open', (id) => {\r\n    console.log('succesfully connected with peer server');\r\n    myPeerId = id;\r\n  });\r\n\r\n  myPeer.on('call', call => {\r\n    call.answer(store.getState().call.localStream);\r\n    call.on('stream', incomingStream => {\r\n      console.log('stream came');\r\n    });\r\n  });\r\n};\r\n\r\nexport const createNewGroupCall = () => {\r\n  wss.registerGroupCall({\r\n    username: store.getState().dashboard.username,\r\n    peerId: myPeerId\r\n  });\r\n\r\n  store.dispatch(setGroupCallActive(true));\r\n  store.dispatch(setCallState(callStates.CALL_IN_PROGRESS));\r\n}\r\n;\r\n\r\nexport const joinGroupCall = (hostSocketId, roomId) => {\r\n  const localStream = store.getState().call.localStream;\r\n\r\n  wss.userWantsToJoinGroupCall({\r\n    peerId: myPeerId,\r\n    hostSocketId,\r\n    roomId,\r\n    localStreamId: localStream.id\r\n  });\r\n\r\n  store.dispatch(setGroupCallActive(true));\r\n  store.dispatch(setCallState(callStates.CALL_IN_PROGRESS));\r\n};\r\n\r\nexport const connectToNewUser = (data) => {\r\n  const localStream = store.getState().call.localStream;\r\n\r\n  const call = myPeer.call(data.peerId, localStream);\r\n\r\n  call.on('stream', (incomingStream) => {\r\n    console.log('stream came');\r\n  });\r\n};\r\n"]},"metadata":{},"sourceType":"module"}