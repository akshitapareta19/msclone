{"ast":null,"code":"import store from '../../store/store';\nimport { setLocalStream, setCallState, callStates, setCallingDialogVisible, setCallerUsername, setCallRejected } from '../../store/actions/callActions';\nimport * as wss from '../wssConnection/wssConnection';\nconst preOfferAnswers = {\n  CALL_ACCEPTED: 'CALL_ACCEPTED',\n  CALL_REJECTED: 'CALL_REJECTED',\n  CALL_NOT_AVAILABLE: 'CALL_NOT_AVAILABLE'\n};\nconst defaultConstrains = {\n  video: true,\n  audio: true\n};\nexport const getLocalStream = () => {\n  navigator.mediaDevices.getUserMedia(defaultConstrains).then(stream => {\n    store.dispatch(setLocalStream(stream));\n    store.dispatch(setCallState(callStates.CALL_AVAILABLE));\n  }).catch(err => {\n    console.log('error occured when trying to get an access to get local stream');\n    console.log(err);\n  });\n};\nlet connectedUserSocketId;\nexport const callToOtherUser = calleeDetails => {\n  connectedUserSocketId = calleeDetails.socketId;\n  store.dispatch(setCallState(callStates.CALL_IN_PROGRESS));\n  store.dispatch(setCallingDialogVisible(true));\n  wss.sendPreOffer({\n    callee: calleeDetails,\n    caller: {\n      username: store.getState().dashboard.username\n    }\n  });\n};\nexport const handlePreOffer = data => {\n  if (checkIfCallIsPossible()) {\n    connectedUserSocketId = data.callerSocketId;\n    store.dispatch(setCallerUsername(data.callerUsername));\n    store.dispatch(setCallState(callStates.CALL_REQUESTED));\n  } else {\n    wss.sendPreOfferAnswer({\n      callerSocketId: data.callerSocketId,\n      answer: preOfferAnswers.CALL_NOT_AVAILABLE\n    });\n  }\n};\nexport const acceptIncomingCallRequest = () => {\n  wss.sendPreOfferAnswer({\n    callerSocketId: connectedUserSocketId,\n    answer: preOfferAnswers.CALL_ACCEPTED\n  });\n};\nexport const rejectIncomingCallRequest = () => {\n  wss.sendPreOfferAnswer({\n    callerSocketId: connectedUserSocketId,\n    answer: preOfferAnswers.CALL_REJECTED\n  });\n  resetCallData();\n};\nexport const handlePreOfferAnswer = data => {\n  store.dispatch(setCallingDialogVisible(false));\n\n  if (data.answer === preOfferAnswers.CALL_ACCEPTED) {// send webRTC offer\n  } else {\n    let rejectionReason;\n\n    if (data.answer === preOfferAnswers.CALL_NOT_AVAILABLE) {\n      rejectionReason = 'Callee is not able to pick up the call right now';\n    } else {\n      rejectionReason = 'Call rejected by the callee';\n    }\n\n    store.dispatch(setCallRejected({\n      rejected: true,\n      reason: rejectionReason\n    }));\n  }\n};\nexport const checkIfCallIsPossible = () => {\n  if (store.getState().call.localStream === null || store.getState().call.callState !== callStates.CALL_AVAILABLE) {\n    return false;\n  } else {\n    return true;\n  }\n};\nexport const resetCallData = () => {\n  connectedUserSocketId = null;\n  store.dispatch(setCallState(callStates.CALL_AVAILABLE));\n};","map":{"version":3,"sources":["C:/Users/akshi/OneDrive/Documents/Desktop/msteams/msteams-frontend/src/utils/webRTC/webRTCHandler.js"],"names":["store","setLocalStream","setCallState","callStates","setCallingDialogVisible","setCallerUsername","setCallRejected","wss","preOfferAnswers","CALL_ACCEPTED","CALL_REJECTED","CALL_NOT_AVAILABLE","defaultConstrains","video","audio","getLocalStream","navigator","mediaDevices","getUserMedia","then","stream","dispatch","CALL_AVAILABLE","catch","err","console","log","connectedUserSocketId","callToOtherUser","calleeDetails","socketId","CALL_IN_PROGRESS","sendPreOffer","callee","caller","username","getState","dashboard","handlePreOffer","data","checkIfCallIsPossible","callerSocketId","callerUsername","CALL_REQUESTED","sendPreOfferAnswer","answer","acceptIncomingCallRequest","rejectIncomingCallRequest","resetCallData","handlePreOfferAnswer","rejectionReason","rejected","reason","call","localStream","callState"],"mappings":"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","sourcesContent":["import store from '../../store/store';\r\nimport { setLocalStream, setCallState, callStates, setCallingDialogVisible, setCallerUsername, setCallRejected } from '../../store/actions/callActions';\r\nimport * as wss from '../wssConnection/wssConnection';\r\n\r\nconst preOfferAnswers = {\r\n  CALL_ACCEPTED: 'CALL_ACCEPTED',\r\n  CALL_REJECTED: 'CALL_REJECTED',\r\n  CALL_NOT_AVAILABLE: 'CALL_NOT_AVAILABLE'\r\n};\r\n\r\nconst defaultConstrains = {\r\n  video: true,\r\n  audio: true\r\n};\r\n\r\nexport const getLocalStream = () => {\r\n  navigator.mediaDevices.getUserMedia(defaultConstrains)\r\n    .then(stream => {\r\n      store.dispatch(setLocalStream(stream));\r\n      store.dispatch(setCallState(callStates.CALL_AVAILABLE));\r\n    })\r\n    .catch(err => {\r\n      console.log('error occured when trying to get an access to get local stream');\r\n      console.log(err);\r\n    });\r\n}\r\n;\r\n\r\nlet connectedUserSocketId;\r\n\r\nexport const callToOtherUser = (calleeDetails) => {\r\n  connectedUserSocketId = calleeDetails.socketId;\r\n  store.dispatch(setCallState(callStates.CALL_IN_PROGRESS));\r\n  store.dispatch(setCallingDialogVisible(true));\r\n  wss.sendPreOffer({\r\n    callee: calleeDetails,\r\n    caller: {\r\n      username: store.getState().dashboard.username\r\n    }\r\n  });\r\n};\r\n\r\nexport const handlePreOffer = (data) => {\r\n  if (checkIfCallIsPossible()) {\r\n    connectedUserSocketId = data.callerSocketId;\r\n    store.dispatch(setCallerUsername(data.callerUsername));\r\n    store.dispatch(setCallState(callStates.CALL_REQUESTED));\r\n  } else {\r\n    wss.sendPreOfferAnswer({\r\n      callerSocketId: data.callerSocketId,\r\n      answer: preOfferAnswers.CALL_NOT_AVAILABLE\r\n    });\r\n  }\r\n};\r\n\r\nexport const acceptIncomingCallRequest = () => {\r\n  wss.sendPreOfferAnswer({\r\n    callerSocketId: connectedUserSocketId,\r\n    answer: preOfferAnswers.CALL_ACCEPTED\r\n  });\r\n};\r\n\r\nexport const rejectIncomingCallRequest = () => {\r\n  wss.sendPreOfferAnswer({\r\n    callerSocketId: connectedUserSocketId,\r\n    answer: preOfferAnswers.CALL_REJECTED\r\n  });\r\n\r\n  resetCallData();\r\n};\r\n\r\nexport const handlePreOfferAnswer = (data) => {\r\n  store.dispatch(setCallingDialogVisible(false));\r\n\r\n  if (data.answer === preOfferAnswers.CALL_ACCEPTED) {\r\n    // send webRTC offer\r\n  } else {\r\n    let rejectionReason;\r\n    if (data.answer === preOfferAnswers.CALL_NOT_AVAILABLE) {\r\n      rejectionReason = 'Callee is not able to pick up the call right now';\r\n    } else {\r\n      rejectionReason = 'Call rejected by the callee';\r\n    }\r\n    store.dispatch(setCallRejected({\r\n      rejected: true,\r\n      reason: rejectionReason\r\n    }));\r\n  }\r\n};\r\n\r\nexport const checkIfCallIsPossible = () => {\r\n  if (store.getState().call.localStream === null ||\r\n  store.getState().call.callState !== callStates.CALL_AVAILABLE) {\r\n    return false;\r\n  } else {\r\n    return true;\r\n  }\r\n};\r\n\r\nexport const resetCallData = () => {\r\n  connectedUserSocketId = null;\r\n  store.dispatch(setCallState(callStates.CALL_AVAILABLE));\r\n};\r\n"]},"metadata":{},"sourceType":"module"}