{"ast":null,"code":"import socketClient from 'socket.io-client';\nimport store from '../../store/store';\nimport * as dashboardActions from '../../store/actions/dashboardActions';\nimport * as webRTCHandler from '../webRTC/webRTCHandler';\nimport * as webRTCGroupCallHandler from '../webRTC/webRTCGroupCallHandler';\nconst SERVER = 'http://localhost:5000';\nconst broadcastEventTypes = {\n  ACTIVE_USERS: 'ACTIVE_USERS',\n  GROUP_CALL_ROOMS: 'GROUP_CALL_ROOMS'\n};\nlet socket;\nexport const connectWithWebSocket = () => {\n  socket = socketClient(SERVER);\n  socket.on('connection', () => {\n    console.log('succesfully connected with wss server');\n    console.log(socket.id);\n  });\n  socket.on('broadcast', data => {\n    handleBroadcastEvents(data);\n  }); // listeners related with direct call\n\n  socket.on('pre-offer', data => {\n    webRTCHandler.handlePreOffer(data);\n  });\n  socket.on('pre-offer-answer', data => {\n    webRTCHandler.handlePreOfferAnswer(data);\n  });\n  socket.on('webRTC-offer', data => {\n    webRTCHandler.handleOffer(data);\n  });\n  socket.on('webRTC-answer', data => {\n    webRTCHandler.handleAnswer(data);\n  });\n  socket.on('webRTC-candidate', data => {\n    webRTCHandler.handleCandidate(data);\n  });\n  socket.on('user-hanged-up', () => {\n    webRTCHandler.handleUserHangedUp();\n  }); // listeners related with group calls\n\n  socket.on('group-call-join-request', data => {\n    webRTCGroupCallHandler.connectToNewUser(data);\n  });\n  socket.on('group-call-user-left', data => {\n    webRTCGroupCallHandler.removeInactiveStream(data);\n  });\n};\nexport const registerNewUser = username => {\n  socket.emit('register-new-user', {\n    username: username,\n    socketId: socket.id\n  });\n}; // emitting events to server related with direct call\n\nexport const sendPreOffer = data => {\n  socket.emit('pre-offer', data);\n};\nexport const sendPreOfferAnswer = data => {\n  socket.emit('pre-offer-answer', data);\n};\nexport const sendWebRTCOffer = data => {\n  socket.emit('webRTC-offer', data);\n};\nexport const sendWebRTCAnswer = data => {\n  socket.emit('webRTC-answer', data);\n};\nexport const sendWebRTCCandidate = data => {\n  socket.emit('webRTC-candidate', data);\n};\nexport const sendUserHangedUp = data => {\n  socket.emit('user-hanged-up', data);\n}; // emitting events related with group calls\n\nexport const registerGroupCall = data => {\n  socket.emit('group-call-register', data);\n};\nexport const userWantsToJoinGroupCall = data => {\n  socket.emit('group-call-join-request', data);\n};\nexport const userLeftGroupCall = data => {\n  socket.emit('group-call-user-left', data);\n};\nexport const groupCallClosedByHost = data => {\n  socket.emit('group-call-closed-by-host', data);\n};\n\nconst handleBroadcastEvents = data => {\n  switch (data.event) {\n    case broadcastEventTypes.ACTIVE_USERS:\n      const activeUsers = data.activeUsers.filter(activeUser => activeUser.socketId !== socket.id);\n      store.dispatch(dashboardActions.setActiveUsers(activeUsers));\n      break;\n\n    case broadcastEventTypes.GROUP_CALL_ROOMS:\n      const groupCallRooms = data.groupCallRooms.filter(room => room.socketId !== socket.id);\n      const activeGroupCallRoomId = webRTCGroupCallHandler.checkActiveGroupCall();\n\n      if (activeGroupCallRoomId) {\n        const room = groupCallRooms.find(room => room.roomId === activeGroupCallRoomId);\n\n        if (!room) {\n          webRTCGroupCallHandler.clearGroupData();\n        }\n      }\n\n      store.dispatch(dashboardActions.setGroupCalls(groupCallRooms));\n      break;\n\n    default:\n      break;\n  }\n};","map":{"version":3,"sources":["C:/Users/akshi/OneDrive/Documents/Desktop/Microsoft-Clone/msteams/msteams-frontend/src/utils/wssConnection/wssConnection.js"],"names":["socketClient","store","dashboardActions","webRTCHandler","webRTCGroupCallHandler","SERVER","broadcastEventTypes","ACTIVE_USERS","GROUP_CALL_ROOMS","socket","connectWithWebSocket","on","console","log","id","data","handleBroadcastEvents","handlePreOffer","handlePreOfferAnswer","handleOffer","handleAnswer","handleCandidate","handleUserHangedUp","connectToNewUser","removeInactiveStream","registerNewUser","username","emit","socketId","sendPreOffer","sendPreOfferAnswer","sendWebRTCOffer","sendWebRTCAnswer","sendWebRTCCandidate","sendUserHangedUp","registerGroupCall","userWantsToJoinGroupCall","userLeftGroupCall","groupCallClosedByHost","event","activeUsers","filter","activeUser","dispatch","setActiveUsers","groupCallRooms","room","activeGroupCallRoomId","checkActiveGroupCall","find","roomId","clearGroupData","setGroupCalls"],"mappings":"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","sourcesContent":["import socketClient from 'socket.io-client';\r\nimport store from '../../store/store';\r\nimport * as dashboardActions from '../../store/actions/dashboardActions';\r\nimport * as webRTCHandler from '../webRTC/webRTCHandler';\r\nimport * as webRTCGroupCallHandler from '../webRTC/webRTCGroupCallHandler';\r\n\r\nconst SERVER = 'http://localhost:5000';\r\n\r\nconst broadcastEventTypes = {\r\n  ACTIVE_USERS: 'ACTIVE_USERS',\r\n  GROUP_CALL_ROOMS: 'GROUP_CALL_ROOMS'\r\n};\r\n\r\nlet socket;\r\n\r\nexport const connectWithWebSocket = () => {\r\n  socket = socketClient(SERVER);\r\n\r\n  socket.on('connection', () => {\r\n    console.log('succesfully connected with wss server');\r\n    console.log(socket.id);\r\n  });\r\n\r\n  socket.on('broadcast', (data) => {\r\n    handleBroadcastEvents(data);\r\n  });\r\n\r\n  // listeners related with direct call\r\n  socket.on('pre-offer', (data) => {\r\n    webRTCHandler.handlePreOffer(data);\r\n  });\r\n\r\n  socket.on('pre-offer-answer', (data) => {\r\n    webRTCHandler.handlePreOfferAnswer(data);\r\n  });\r\n\r\n  socket.on('webRTC-offer', (data) => {\r\n    webRTCHandler.handleOffer(data);\r\n  });\r\n\r\n  socket.on('webRTC-answer', (data) => {\r\n    webRTCHandler.handleAnswer(data);\r\n  });\r\n\r\n  socket.on('webRTC-candidate', (data) => {\r\n    webRTCHandler.handleCandidate(data);\r\n  });\r\n\r\n  socket.on('user-hanged-up', () => {\r\n    webRTCHandler.handleUserHangedUp();\r\n  });\r\n\r\n  // listeners related with group calls\r\n\r\n  socket.on('group-call-join-request', (data) => {\r\n    webRTCGroupCallHandler.connectToNewUser(data);\r\n  });\r\n\r\n  socket.on('group-call-user-left', (data) => {\r\n    webRTCGroupCallHandler.removeInactiveStream(data);\r\n  });\r\n};\r\n\r\nexport const registerNewUser = (username) => {\r\n  socket.emit('register-new-user', {\r\n    username: username,\r\n    socketId: socket.id\r\n  });\r\n};\r\n\r\n// emitting events to server related with direct call\r\n\r\nexport const sendPreOffer = (data) => {\r\n  socket.emit('pre-offer', data);\r\n};\r\n\r\nexport const sendPreOfferAnswer = (data) => {\r\n  socket.emit('pre-offer-answer', data);\r\n};\r\n\r\nexport const sendWebRTCOffer = (data) => {\r\n  socket.emit('webRTC-offer', data);\r\n};\r\n\r\nexport const sendWebRTCAnswer = (data) => {\r\n  socket.emit('webRTC-answer', data);\r\n};\r\n\r\nexport const sendWebRTCCandidate = (data) => {\r\n  socket.emit('webRTC-candidate', data);\r\n};\r\n\r\nexport const sendUserHangedUp = (data) => {\r\n  socket.emit('user-hanged-up', data);\r\n};\r\n\r\n// emitting events related with group calls\r\n\r\nexport const registerGroupCall = (data) => {\r\n  socket.emit('group-call-register', data);\r\n};\r\n\r\nexport const userWantsToJoinGroupCall = (data) => {\r\n  socket.emit('group-call-join-request', data);\r\n};\r\n\r\nexport const userLeftGroupCall = (data) => {\r\n  socket.emit('group-call-user-left', data);\r\n};\r\n\r\nexport const groupCallClosedByHost = (data) => {\r\n  socket.emit('group-call-closed-by-host', data);\r\n};\r\n\r\nconst handleBroadcastEvents = (data) => {\r\n  switch (data.event) {\r\n    case broadcastEventTypes.ACTIVE_USERS:\r\n      const activeUsers = data.activeUsers.filter(activeUser => activeUser.socketId !== socket.id);\r\n      store.dispatch(dashboardActions.setActiveUsers(activeUsers));\r\n      break;\r\n    case broadcastEventTypes.GROUP_CALL_ROOMS:\r\n      const groupCallRooms = data.groupCallRooms.filter(room => room.socketId !== socket.id);\r\n      const activeGroupCallRoomId = webRTCGroupCallHandler.checkActiveGroupCall();\r\n\r\n      if (activeGroupCallRoomId) {\r\n        const room = groupCallRooms.find(room => room.roomId === activeGroupCallRoomId);\r\n        if (!room) {\r\n          webRTCGroupCallHandler.clearGroupData();\r\n        }\r\n      }\r\n      store.dispatch(dashboardActions.setGroupCalls(groupCallRooms));\r\n      break;\r\n    default:\r\n      break;\r\n  }\r\n}\r\n;\r\n"]},"metadata":{},"sourceType":"module"}