{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\akshi\\\\OneDrive\\\\Documents\\\\Desktop\\\\Microsoft-Clone\\\\msteams\\\\msteams-frontend\\\\src\\\\Dashboard\\\\components\\\\Messenger\\\\Messenger.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { sendMessageUsingDataChannel } from '../../../utils/webRTC/webRTCHandler';\nimport MessageDisplayer from './MessageDisplayer';\nimport './Messenger.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Messenger = ({\n  message,\n  setDirectCallMessage\n}) => {\n  _s();\n\n  const [inputValue, setInputValue] = useState('');\n\n  const handleOnKeyDownEvent = e => {\n    if (e.keyCode === 13) {\n      sendMessageUsingDataChannel(inputValue);\n      setInputValue('');\n    }\n  };\n\n  useEffect(() => {\n    if (message.received) {\n      setTimeout(() => {\n        setDirectCallMessage(false, '');\n      }, [3000]);\n    }\n  }, [message.received]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      className: \"messages_input\",\n      type: \"text\",\n      value: inputValue,\n      onChange: e => {\n        setInputValue(e.target.value);\n      },\n      onKeyDown: handleOnKeyDownEvent,\n      placeholder: \"Type your message\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this), message.received && /*#__PURE__*/_jsxDEV(MessageDisplayer, {\n      message: message.content\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 28\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Messenger, \"g3WCsqcvSc9WB7w4du2ucRdqd7Y=\");\n\n_c = Messenger;\nexport default Messenger;\n\nvar _c;\n\n$RefreshReg$(_c, \"Messenger\");","map":{"version":3,"sources":["C:/Users/akshi/OneDrive/Documents/Desktop/Microsoft-Clone/msteams/msteams-frontend/src/Dashboard/components/Messenger/Messenger.js"],"names":["React","useState","useEffect","sendMessageUsingDataChannel","MessageDisplayer","Messenger","message","setDirectCallMessage","inputValue","setInputValue","handleOnKeyDownEvent","e","keyCode","received","setTimeout","target","value","content"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,2BAAT,QAA4C,qCAA5C;AACA,OAAOC,gBAAP,MAA6B,oBAA7B;AAEA,OAAO,iBAAP;;;;AAEA,MAAMC,SAAS,GAAG,CAAC;AAAEC,EAAAA,OAAF;AAAWC,EAAAA;AAAX,CAAD,KAAuC;AAAA;;AACvD,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BR,QAAQ,CAAC,EAAD,CAA5C;;AAEA,QAAMS,oBAAoB,GAAIC,CAAD,IAAO;AAClC,QAAIA,CAAC,CAACC,OAAF,KAAc,EAAlB,EAAsB;AACpBT,MAAAA,2BAA2B,CAACK,UAAD,CAA3B;AACAC,MAAAA,aAAa,CAAC,EAAD,CAAb;AACD;AACF,GALD;;AAOAP,EAAAA,SAAS,CAAC,MAAM;AACd,QAAII,OAAO,CAACO,QAAZ,EAAsB;AACpBC,MAAAA,UAAU,CAAC,MAAM;AACfP,QAAAA,oBAAoB,CAAC,KAAD,EAAQ,EAAR,CAApB;AACD,OAFS,EAEP,CAAC,IAAD,CAFO,CAAV;AAGD;AACF,GANQ,EAMN,CAACD,OAAO,CAACO,QAAT,CANM,CAAT;AAQA,sBACE;AAAA,4BACE;AACE,MAAA,SAAS,EAAC,gBADZ;AAEE,MAAA,IAAI,EAAC,MAFP;AAGE,MAAA,KAAK,EAAEL,UAHT;AAIE,MAAA,QAAQ,EAAGG,CAAD,IAAO;AAAEF,QAAAA,aAAa,CAACE,CAAC,CAACI,MAAF,CAASC,KAAV,CAAb;AAAgC,OAJrD;AAKE,MAAA,SAAS,EAAEN,oBALb;AAME,MAAA,WAAW,EAAC;AANd;AAAA;AAAA;AAAA;AAAA,YADF,EASGJ,OAAO,CAACO,QAAR,iBAAoB,QAAC,gBAAD;AAAkB,MAAA,OAAO,EAAEP,OAAO,CAACW;AAAnC;AAAA;AAAA;AAAA;AAAA,YATvB;AAAA,kBADF;AAaD,CA/BD;;GAAMZ,S;;KAAAA,S;AAiCN,eAAeA,SAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { sendMessageUsingDataChannel } from '../../../utils/webRTC/webRTCHandler';\r\nimport MessageDisplayer from './MessageDisplayer';\r\n\r\nimport './Messenger.css';\r\n\r\nconst Messenger = ({ message, setDirectCallMessage }) => {\r\n  const [inputValue, setInputValue] = useState('');\r\n\r\n  const handleOnKeyDownEvent = (e) => {\r\n    if (e.keyCode === 13) {\r\n      sendMessageUsingDataChannel(inputValue);\r\n      setInputValue('');\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (message.received) {\r\n      setTimeout(() => {\r\n        setDirectCallMessage(false, '');\r\n      }, [3000]);\r\n    }\r\n  }, [message.received]);\r\n\r\n  return (\r\n    <>\r\n      <input\r\n        className='messages_input'\r\n        type='text'\r\n        value={inputValue}\r\n        onChange={(e) => { setInputValue(e.target.value); }}\r\n        onKeyDown={handleOnKeyDownEvent}\r\n        placeholder='Type your message'\r\n      />\r\n      {message.received && <MessageDisplayer message={message.content} />}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Messenger;\r\n"]},"metadata":{},"sourceType":"module"}